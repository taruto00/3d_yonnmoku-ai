# -*- coding: utf-8 -*-
"""evaluate_network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TEurC6hNtLerKKm47UnjoOAgGzfQYcDr
"""

# =============================================================
# evaluate_network_bitboard.py
#   - latest.h5 と best.h5 を対戦させ平均ポイントを算出
#   - 平均 > 0.5 なら best.h5 を更新
# =============================================================
from pathlib import Path
from shutil import copy
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras import backend as K

from game       import State                 # ビットボード State
from pv_mcts    import pv_mcts_action        # ビットボード対応版

# -------------------- パラメータ --------------------
EN_GAME_COUNT  = 200     # 評価ゲーム数 (本家400)
EN_TEMPERATURE = 0.05    # ボルツマン温度0.1→0.05

# -------------------- ポイント計算 -------------------
def first_player_point(ended_state: State) -> float:
    if ended_state.is_lose():
        return 0.0 if ended_state.is_first_player() else 1.0
    return 0.5   # 引き分け

# -------------------- 1 ゲーム実行 -------------------
def play(next_actions):
    """next_actions = (先手AI, 後手AI)"""
    state = State()
    while not state.is_done():
        action_fn = next_actions[0] if state.is_first_player() else next_actions[1]
        action    = action_fn(state)                 # セル index
        state     = state.next_from_index(action)    # ★ ビットボード用
    return first_player_point(state)

# -------------------- best プレイヤー更新 -------------
def update_best_player():
    copy("./model/latest.h5", "./model/best.h5")
    print("🏆  best.h5 を更新しました")

# -------------------- ネットワーク評価 ----------------
def evaluate_network():
    # --- モデル読み込み (compile=False で警告抑止) ---
    model_latest = load_model("./model/latest.h5", compile=False)
    model_best   = load_model("./model/best.h5",   compile=False)

    # --- 行動関数 ---
    next_latest = pv_mcts_action(model_latest, EN_TEMPERATURE)
    next_best   = pv_mcts_action(model_best,   EN_TEMPERATURE)
    pair = (next_latest, next_best)

    # --- 対戦 ---
    total = 0.0
    for i in range(EN_GAME_COUNT):
        if i % 2 == 0:                  # 偶数局：latest 先手
            total += play(pair)
        else:                           # 奇数局：best 先手
            total += 1.0 - play(pair[::-1])
        print(f"\rEvaluate {i+1}/{EN_GAME_COUNT}", end="")
    print()

    avg = total / EN_GAME_COUNT
    print("Average Point:", avg)

    # --- 後始末 ---
    K.clear_session(); del model_latest, model_best

    # --- best 更新判定 ---
    if avg < 0.48:                        # 閾値を変更
        update_best_player()
        return True
    return False

# -------------------- 動作確認 ------------------------
if __name__ == "__main__":
    evaluate_network()
